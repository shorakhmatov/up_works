/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Employer as PrismaEmployer } from "@prisma/client";

export class EmployerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.EmployerCountArgs, "select">): Promise<number> {
    return this.prisma.employer.count(args);
  }

  async employers(
    args: Prisma.EmployerFindManyArgs
  ): Promise<PrismaEmployer[]> {
    return this.prisma.employer.findMany(args);
  }
  async employer(
    args: Prisma.EmployerFindUniqueArgs
  ): Promise<PrismaEmployer | null> {
    return this.prisma.employer.findUnique(args);
  }
  async createEmployer(
    args: Prisma.EmployerCreateArgs
  ): Promise<PrismaEmployer> {
    return this.prisma.employer.create(args);
  }
  async updateEmployer(
    args: Prisma.EmployerUpdateArgs
  ): Promise<PrismaEmployer> {
    return this.prisma.employer.update(args);
  }
  async deleteEmployer(
    args: Prisma.EmployerDeleteArgs
  ): Promise<PrismaEmployer> {
    return this.prisma.employer.delete(args);
  }
}
