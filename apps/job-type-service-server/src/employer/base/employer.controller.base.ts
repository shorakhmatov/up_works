/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EmployerService } from "../employer.service";
import { EmployerCreateInput } from "./EmployerCreateInput";
import { Employer } from "./Employer";
import { EmployerFindManyArgs } from "./EmployerFindManyArgs";
import { EmployerWhereUniqueInput } from "./EmployerWhereUniqueInput";
import { EmployerUpdateInput } from "./EmployerUpdateInput";

export class EmployerControllerBase {
  constructor(protected readonly service: EmployerService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Employer })
  async createEmployer(
    @common.Body() data: EmployerCreateInput
  ): Promise<Employer> {
    return await this.service.createEmployer({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Employer] })
  @ApiNestedQuery(EmployerFindManyArgs)
  async employers(@common.Req() request: Request): Promise<Employer[]> {
    const args = plainToClass(EmployerFindManyArgs, request.query);
    return this.service.employers({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Employer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async employer(
    @common.Param() params: EmployerWhereUniqueInput
  ): Promise<Employer | null> {
    const result = await this.service.employer({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Employer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEmployer(
    @common.Param() params: EmployerWhereUniqueInput,
    @common.Body() data: EmployerUpdateInput
  ): Promise<Employer | null> {
    try {
      return await this.service.updateEmployer({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Employer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEmployer(
    @common.Param() params: EmployerWhereUniqueInput
  ): Promise<Employer | null> {
    try {
      return await this.service.deleteEmployer({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
