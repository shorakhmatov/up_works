/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Employer } from "./Employer";
import { EmployerCountArgs } from "./EmployerCountArgs";
import { EmployerFindManyArgs } from "./EmployerFindManyArgs";
import { EmployerFindUniqueArgs } from "./EmployerFindUniqueArgs";
import { DeleteEmployerArgs } from "./DeleteEmployerArgs";
import { EmployerService } from "../employer.service";
@graphql.Resolver(() => Employer)
export class EmployerResolverBase {
  constructor(protected readonly service: EmployerService) {}

  async _employersMeta(
    @graphql.Args() args: EmployerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Employer])
  async employers(
    @graphql.Args() args: EmployerFindManyArgs
  ): Promise<Employer[]> {
    return this.service.employers(args);
  }

  @graphql.Query(() => Employer, { nullable: true })
  async employer(
    @graphql.Args() args: EmployerFindUniqueArgs
  ): Promise<Employer | null> {
    const result = await this.service.employer(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Employer)
  async deleteEmployer(
    @graphql.Args() args: DeleteEmployerArgs
  ): Promise<Employer | null> {
    try {
      return await this.service.deleteEmployer(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
