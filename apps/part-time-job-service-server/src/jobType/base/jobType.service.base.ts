/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  JobType as PrismaJobType,
  Job as PrismaJob,
} from "@prisma/client";

export class JobTypeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.JobTypeCountArgs, "select">): Promise<number> {
    return this.prisma.jobType.count(args);
  }

  async jobTypes(args: Prisma.JobTypeFindManyArgs): Promise<PrismaJobType[]> {
    return this.prisma.jobType.findMany(args);
  }
  async jobType(
    args: Prisma.JobTypeFindUniqueArgs
  ): Promise<PrismaJobType | null> {
    return this.prisma.jobType.findUnique(args);
  }
  async createJobType(args: Prisma.JobTypeCreateArgs): Promise<PrismaJobType> {
    return this.prisma.jobType.create(args);
  }
  async updateJobType(args: Prisma.JobTypeUpdateArgs): Promise<PrismaJobType> {
    return this.prisma.jobType.update(args);
  }
  async deleteJobType(args: Prisma.JobTypeDeleteArgs): Promise<PrismaJobType> {
    return this.prisma.jobType.delete(args);
  }

  async findJobs(
    parentId: string,
    args: Prisma.JobFindManyArgs
  ): Promise<PrismaJob[]> {
    return this.prisma.jobType
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .jobs(args);
  }
}
